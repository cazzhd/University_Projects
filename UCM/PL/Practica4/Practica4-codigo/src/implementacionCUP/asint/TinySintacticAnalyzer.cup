package implementacionCUP.asint;

import java_cup.runtime.*;
import implementacionCUP.alex.TinyLexicalAnalyzer;
import implementacionCUP.alex.LexicalUnit;
import implementacionCUP.errors.TinyErrorController;

scan with {: return getScanner().next_token(); :};
parser code {:
   private TinyErrorController errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((LexicalUnit)unidadLexica);
   }
:};
init with {:
   errores = new TinyErrorController();
   TinyLexicalAnalyzer alex = (TinyLexicalAnalyzer)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal ID, INT, REAL, EXE;

terminal EQ, PLS, MNS, MUL, DIV;

terminal GT, GE, LT, LE, BE, NE;
terminal BOOL, NUM;
terminal AND, OR, NOT;
terminal PAO, PCE;
terminal SEP, PYC;

non terminal PROGRAM;
non terminal A, OA, Ap;
non terminal B, OB, Bp;

non terminal E0, E0p, O0;
non terminal E1, E1p;
non terminal E2, E2p, O2;
non terminal E3, E3p, O3;
non terminal E4;
non terminal E5;

B       ::= OB ID Bp;
OB      ::= BOOL | NUM;
Bp      ::= PYC B | ;
A       ::= ID EQ E0 Ap;
Ap      ::= PYC A | ;
PROGRAM ::= B SEP A;

E0      ::= E1 E0p;
E0p     ::= O0 E1 E0p | ;
O0      ::= PLS | MNS;

E1      ::= E2 E1p;
E1p     ::= AND E1 | OR E2 | ;

E2      ::= E3 E2p;
E2p     ::= O2 E3 | ;
O2      ::= GT | GE | LT | LE | BE | NE;

E3      ::= E4 E3p;
E3p     ::= O3 E4 E3p | ;
O3      ::= MUL | DIV;

E4      ::= MNS E4 | NOT E5 | E5;

E5      ::= PAO E0 PCE | ID | INT | REAL | EXE;
