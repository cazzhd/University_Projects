options {
	STATIC = false;
}
PARSER_BEGIN(JavaCCLexicalAnalyzer)
package implementacionCC.asint;
public class JavaCCLexicalAnalyzer {}
PARSER_END(JavaCCLexicalAnalyzer)

TOKEN:{<#NATURAL:["0"-"9"](["0"-"9"])*>}
TOKEN:{<#LETRA:["a"-"z","A"-"Z"]>}
TOKEN:{<NUM:"num">}
TOKEN:{<BOOL:"bool">}
TOKEN:{<AND:"and">}
TOKEN:{<OR:"or">}
TOKEN:{<NOT:"not">}
TOKEN:{<TRUE:"true">}
TOKEN:{<FALSE:"false">}
TOKEN:{<ID:<LETRA>(<LETRA>|["0"-"9"]|"_")*>}
TOKEN:{<INT:("+"|"-")?<NATURAL>>}
TOKEN:{<DEC:<INT>"."<NATURAL>>}
TOKEN:{<EXE:(<INT>|<DEC>)("e"|"E")<INT>>}
TOKEN: {<PYC:";">}
TOKEN: {<OA:"=">}
TOKEN: {<SEPARATOR:"&&">}
TOKEN: {<RELACIONALES:("=="|"!="|">"|">="|"<"|"<=")>}

<*> SKIP: {
  < " " | "\t" | "\r" | "\n" | "\r\n" >
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
| <"/*"(~["/"])*  "*""/" >
}

void B() : {} {<BOOL> <ID> BP() | <NUM> <ID> BP() }
void BP() : {} { <PYC> B() | {} }
void A(): {} {<ID> <OA> E0() AP()}
void AP(): {} {<PYC> A() | {} }
void PROGRAM(): {} {B() <SEPARATOR> A() }
void E0() : {} {E1() E0P()}
void E0P() : {} {OP0() E1() E0P() | {} }
void OP0() : {} {"+" | "-"}
void E1() : {} {E2() E1P() }
void E1P() : {} { <AND> E1() | <OR> E2() | {} }
void E2() : {} {E3() E2P() }
void E2P() : {} {<RELACIONALES> E3() | {} }
void E3() : {} {E4() E3P() }
void E3P() : {} {OP1() E4() E3P() | {} }
void OP1() : {} {"*" | "/"}
void E4() : {} {"-" E4() | <NOT> E5() | E5() }
void E5() : {} {"(" E0() ")" | <ID> | <INT> | <DEC> | <EXE> }
