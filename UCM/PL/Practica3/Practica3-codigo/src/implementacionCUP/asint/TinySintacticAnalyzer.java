
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 04 07:46:26 CEST 2019
//----------------------------------------------------

package implementacionCUP.asint;

import java_cup.runtime.*;
import implementacionCUP.alex.TinyLexicalAnalyzer;
import implementacionCUP.alex.LexicalUnit;
import implementacionCUP.errors.TinyErrorController;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 04 07:46:26 CEST 2019
  */
public class TinySintacticAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TinySintacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public TinySintacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TinySintacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\006\005\000\002\002\004\000\002\007" +
    "\003\000\002\007\003\000\002\010\004\000\002\010\002" +
    "\000\002\003\006\000\002\005\004\000\002\005\002\000" +
    "\002\002\005\000\002\011\004\000\002\012\005\000\002" +
    "\012\002\000\002\013\003\000\002\013\003\000\002\014" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\002" +
    "\000\002\016\004\000\002\017\004\000\002\017\002\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\004\000\002\022\005\000\002\022\002\000\002\023\003" +
    "\000\002\023\003\000\002\024\004\000\002\024\004\000" +
    "\002\024\003\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\012\000\006\023\006\024\004\001\002\000\004\004" +
    "\ufffe\001\002\000\004\004\011\001\002\000\004\004\uffff" +
    "\001\002\000\004\002\010\001\002\000\004\002\000\001" +
    "\002\000\006\002\ufffc\033\013\001\002\000\004\002\001" +
    "\001\002\000\006\023\006\024\004\001\002\000\004\002" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\012\000\006\006\006\007\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\011\001\001\000\002\001" +
    "\001\000\006\006\013\007\004\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TinySintacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TinySintacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TinySintacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   errores = new TinyErrorController();
   TinyLexicalAnalyzer alex = (TinyLexicalAnalyzer)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


   private TinyErrorController errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((LexicalUnit)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TinySintacticAnalyzer$actions {
  private final TinySintacticAnalyzer parser;

  /** Constructor */
  CUP$TinySintacticAnalyzer$actions(TinySintacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TinySintacticAnalyzer$do_action_part00000000(
    int                        CUP$TinySintacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$TinySintacticAnalyzer$parser,
    java.util.Stack            CUP$TinySintacticAnalyzer$stack,
    int                        CUP$TinySintacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TinySintacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$TinySintacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // B ::= OB ID Bp 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("B",4, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= B EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TinySintacticAnalyzer$stack.elementAt(CUP$TinySintacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$TinySintacticAnalyzer$parser.done_parsing();
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OB ::= BOOL 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OB",5, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OB ::= NUM 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OB",5, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bp ::= PYC B 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Bp",6, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Bp ::= 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Bp",6, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A ::= ID EQ E0 Ap 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("A",1, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Ap ::= PYC A 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Ap",3, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Ap ::= 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Ap",3, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAM ::= B SEP A 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E0 ::= E1 E0p 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",7, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E0p ::= O0 E1 E0p 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E0p",8, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E0p ::= 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E0p",8, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // O0 ::= PLS 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O0",9, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // O0 ::= MNS 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O0",9, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E1 ::= E2 E1p 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",10, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E1p ::= AND E1 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E1p",11, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E1p ::= OR E2 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E1p",11, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E1p ::= 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E1p",11, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E2 ::= E3 E2p 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E2p ::= O2 E3 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E2p",13, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E2p ::= 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E2p",13, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // O2 ::= GT 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O2",14, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // O2 ::= GE 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O2",14, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // O2 ::= LT 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O2",14, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // O2 ::= LE 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O2",14, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // O2 ::= BE 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O2",14, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // O2 ::= NE 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O2",14, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E3 ::= E4 E3p 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",15, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E3p ::= O3 E4 E3p 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E3p",16, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E3p ::= 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E3p",16, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // O3 ::= MUL 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O3",17, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // O3 ::= DIV 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("O3",17, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E4 ::= MNS E4 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",18, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E4 ::= NOT E5 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",18, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",18, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E5 ::= PAO E0 PCE 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",19, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E5 ::= ID 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",19, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E5 ::= INT 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",19, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E5 ::= REAL 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",19, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E5 ::= EXE 
            {
              Object RESULT =null;

              CUP$TinySintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",19, RESULT);
            }
          return CUP$TinySintacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TinySintacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TinySintacticAnalyzer$do_action(
    int                        CUP$TinySintacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$TinySintacticAnalyzer$parser,
    java.util.Stack            CUP$TinySintacticAnalyzer$stack,
    int                        CUP$TinySintacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$TinySintacticAnalyzer$do_action_part00000000(
                               CUP$TinySintacticAnalyzer$act_num,
                               CUP$TinySintacticAnalyzer$parser,
                               CUP$TinySintacticAnalyzer$stack,
                               CUP$TinySintacticAnalyzer$top);
    }
}

